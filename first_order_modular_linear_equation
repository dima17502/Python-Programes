def gcdex(a, b):
    if a >= b >= 0 and a + b > 0:
        if b == 0:
            d, x, y = (a, 1, 0)
        else:
            d, p, q = gcdex(b, a % b)
            x = q
            y = p - (a // b) * q
        return d, x, y
    elif  b > a > 0:
        d, x, y = gcdex(b, a)
        return d, y, x
    else:
        print("Invalid input")
        return -1

def gcd(a, b):
    if a <  b:
        a, b = b, a
    r = a % b
    while r != 0:
        a = b
        b = r
        r = a % b
    return b


def inv_elem(a, b):
    d, x, y = gcdex(a, b)
    if gcdex(a, b)[0] == 1:
        return x
    print("Inverse element doesn't exist")
    return -1


def diophantine_eq(a, b, m):
    d = gcd(a, m)
    res = []
    if d == 1:
        res.append((b * inv_elem(a, m)) % m)
    elif b % d != 0:
        print("No solutions")
    else:
        print("There are several solutions:")
        x = diophantine_eq(a // d, b // d, m // d)
        res.append(x[0])
        for i in range(1, d):
            res.append((x[0] + i * d) % m)
    return res


a, b, m = map(int, input().split())
res = diophantine_eq(a, b, m)
print(*res)
